View(names(trump_nums))
names(trump_nums)
trump_cut <- trump_nums[c(30, 10, 13, 11, 16)]
trump_idaho_train <- trump_cut[which(trump$state == "Idaho"),]
trump_idaho_labels <- trump_wins[which(trump$state == "Idaho")]
trump_train <- trump_cut[which(trump$state != "Idaho"), ]
trump_train_labels <- trump_wins[which(trump$state != "Idaho")]
trump_confidence <- numeric()
for (i in 1:nrow(trump_idaho_train[1:5])){
trump_confidence[[i]] <- mean(trump_train_labels[knn(trump_idaho_train[i, ], trump_train, 15)[2:15]])
}
correct <- 1 - sum(abs(trump_idaho_labels - as.numeric(trump_confidence > 0.5)))/length(trump_confidence)
correct
trump_confidence
as.numeric(trump_confidence > 0.5)
trump_idaho_labels
df <- data.frame(a = 1:7)
df
df <- data.frame(a = 1:7, b = 1:6)
df <- data.frame(a = 1:7, b = 2:8)
df$a
print(paste("hello", 1))
correct <- 1 - sum(abs(trump_idaho_labels - as.numeric(trump_confidence > 0.5)))/length(trump_confidence)
knn_pred <- function(cand_nums, cand_labels, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
#too lazy to change variable names, so rebind.
trump_nums <- cand_nums
trump_cut <- trump_nums[features]
trump_idaho_train <- trump_cut[which(trump$state == state),]
trump_idaho_labels <- trump_wins[which(trump$state == state)]
trump_train <- trump_cut[which(trump$state != state), ]
trump_train_labels <- trump_wins[which(trump$state != state)]
trump_confidence <- numeric()
for (i in 1:nrow(trump_idaho_train[1:5])){
trump_confidence[[i]] <- mean(trump_train_labels[knn(trump_idaho_train[i, ], trump_train, k)[1:k]])
}
correct <- 1 - sum(abs(trump_idaho_labels - as.numeric(trump_confidence > 0.5)))/length(trump_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(confidence = trump_confidence)
return(df)
}
correct
knn_pred <- function(cand_nums, cand_labels, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
#too lazy to change variable names, so rebind.
trump_nums <- cand_nums
trump_wins <- cand_labels
trump <- cand
trump_cut <- trump_nums[features]
trump_idaho_train <- trump_cut[which(trump$state == state),]
trump_idaho_labels <- trump_wins[which(trump$state == state)]
trump_train <- trump_cut[which(trump$state != state), ]
trump_train_labels <- trump_wins[which(trump$state != state)]
trump_confidence <- numeric()
for (i in 1:nrow(trump_idaho_train[1:5])){
trump_confidence[[i]] <- mean(trump_train_labels[knn(trump_idaho_train[i, ], trump_train, k)[1:k]])
}
correct <- 1 - sum(abs(trump_idaho_labels - as.numeric(trump_confidence > 0.5)))/length(trump_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(confidence = trump_confidence)
return(df)
}
knn_pred(sanders_nums, sanders_wins, sanders)
knn_pred(trump_nums, trump_wins, trump)
source("util.R")
trump_wins <- as.numeric(trump_nums$votes - cruz_nums$votes > 0)
knn_pred(trump_nums, trump_wins, trump)
source("util.R")
library("FNN")
source("util.R")
#Cleaning some more, with labels for win/losses relative to each other.
#Assumes two people races
trump_wins <- as.numeric(trump_nums$votes - cruz_nums$votes > 0)
sanders_wins <- as.numeric(sanders_nums$votes - clinton_nums$votes > 0)
# DEPRECATED out <- knn(subset(train, select = -c(votes)), subset(test, select = -c(votes)), train$votes, k = 2)
#Rewriting K Nearest Neighbors
calculate_distance <- function(vec1, vec2){
#Calculates Euclidian distance between two vectors
return(sqrt(sum((vec1 - vec2)^2)))
}
knn <- function(cand, data, num = 5){
#Returns num nearest neighbors to cand in dataset
distances <- apply(data, 1, calculate_distance, cand)
return(sort.int(distances, index.return = T)$ix[1:num])
}
#Time for Cross validation!
#Partitioning data
shuffled_indexes <- sample.int(nrow(trump_nums))
shuffled <- trump_nums[shuffled_indexes,]
train <- shuffled[1:1500, ]
train_indexes <- shuffled_indexes[1:1500]
test_indexes <- shuffled_indexes[1501:length(shuffled_indexes)]
test <- shuffled[1501:nrow(shuffled), ]
test_labels <- trump_wins[test_indexes]
train_labels <- trump_wins[train_indexes]
#Packaging it up
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train[1:5])){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
test
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train[1:2])){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state != state), confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train[1:2])){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state != state)[1:length(cand_confidence)], confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
test$indexes
test$confidence
length(test$confidence)
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train)){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state != state)[1:length(cand_confidence)], confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
###################
### Running KNN ###
###################
source("util.R")
#Cleaning some more, with labels for win/losses relative to each other.
#Assumes two people races
trump_wins <- as.numeric(trump_nums$votes - cruz_nums$votes > 0)
sanders_wins <- as.numeric(sanders_nums$votes - clinton_nums$votes > 0)
# DEPRECATED out <- knn(subset(train, select = -c(votes)), subset(test, select = -c(votes)), train$votes, k = 2)
#Rewriting K Nearest Neighbors
calculate_distance <- function(vec1, vec2){
#Calculates Euclidian distance between two vectors
return(sqrt(sum((vec1 - vec2)^2)))
}
knn <- function(cand, data, num = 5){
#Returns num nearest neighbors to cand in dataset
distances <- apply(data, 1, calculate_distance, cand)
return(sort.int(distances, index.return = T)$ix[1:num])
}
#Packaging it up
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train)){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state != state)[1:length(cand_confidence)], confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
test$indexes
which(trump$state != "Idaho")
View(trump)
trump$state
which(trump$state == 1)
which(trump$state == "Idaho")
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=15, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train)){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state == state)[1:length(cand_confidence)], confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump)
test$indexes
View(trump[test$indexes,])
test$confidence
knn_pred <- function(cand_nums, cand_wins, cand, state = "Idaho", k=20, features = c(30, 10, 13, 11, 16)){
#Returns proportion of KNN with that label for that state (predictions)
cand_cut <- cand_nums[features]
cand_idaho_train <- cand_cut[which(cand$state == state),]
cand_idaho_labels <- cand_wins[which(cand$state == state)]
cand_train <- cand_cut[which(cand$state != state), ]
cand_train_labels <- cand_wins[which(cand$state != state)]
cand_confidence <- numeric()
for (i in 1:nrow(cand_idaho_train)){
cand_confidence[[i]] <- mean(cand_train_labels[knn(cand_idaho_train[i, ], cand_train, k)[1:k]])
}
correct <- 1 - sum(abs(cand_idaho_labels - as.numeric(cand_confidence > 0.5)))/length(cand_confidence)
print(paste("Correct rate is,", correct))
df <- data.frame(indexes = which(cand$state == state)[1:length(cand_confidence)], confidence = cand_confidence)
return(df)
}
test <- knn_pred(trump_nums, trump_wins, trump, k=20)
install.packages("maps")
install.packages("ggplot2")
library(ggplot2)
library(maps)
# data is a data frame that has the columns: percentages, candidate, and the region.
map_data <- function(data, color1, color2, state="ohio") {
states = map_data("county", regions=state)
data <- data %>% mutate(percentages = (candidate == "Sanders") * percentages + (candidate == "Clinton") * (-percentages))
names(states) <- tolower(names(data))
combined <- merge(states, data, sort=FALSE, by="region")
data <- data %>% mutate()
ggplot() + geom_polygon(data=combined, aes(x=long, y=lat, group=group, color=percentages))
+ scale_colour_gradient2(low = muted(color1), mid="white", high = muted(color2), guide="colorbar")
+ theme_bw()  + labs(fill = "Candidate", title = "Winning Candidate by State", x="", y="")
}
map_data(test$confidence)
map_data(test$confidence, "white", "black", "Idaho")
map_data(test$confidence, "white", "black", state = "Idaho")
map_data(test$confidence, "white", "black")
map_data
library(maps)
map_data
ls
names(trump_nums)
names(trump_nums)[c(30, 10, 13, 11, 16)]
map("iowa")
library(mapproj)
library(choroplethr)
install.packages("choroplethr")
libary(choroplethr)
library(choroplethr)
View(trump)
library(choroplethr)
install.packages("mapproj")
install.packages("mapproj")
library(choroplethr)
library(mapproj)
data(df_county_demographics)
df_county_demographics
names(df_county_demographics)
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_hispanic
county_choropleth(df_county_demographics,
state_zoom = "texas",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) + coord_map()
install.packages(choroplethrMaps)
install.packages(choroplethrMaps)
install.packages("choroplethrMaps")
library(choroplethr)
library(mapproj)
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_hispanic
county_choropleth(df_county_demographics,
state_zoom = "texas",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) + coord_map()
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_hispanic
county_choropleth(df_county_demographics,
state_zoom = "texas",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) #+ coord_map()
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_hispanic
county_choropleth(df_county_demographics,
state_zoom = "Idaho",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) #+ coord_map()
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_hispanic
county_choropleth(df_county_demographics,
state_zoom = "idaho",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) #+ coord_map()
View(df_county_demographics)
source("knn.R")
trump_confidene <- knn_pred(trump_nums, trump_wins, trump, k=20)
trump_confidene$confidence
df_county_demographics$value = trump_confidene$confidence
county_choropleth(trump_confidene$confidence,
state_zoom = "idaho",
title      = "Texas County Percent Hispanicn2012 Estimates",
num_colors = 9) #+ coord_map()
trump_confidence <- knn_pred(trump_nums, trump_wins, trump, k=20)
trump_confidence$value = trump_confidence$confidence
names(trump_confidence)
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "hopefully works",
num_colors = 9)
trump_confidence$region <- trump[which(trump$state == "Idaho"),]
trump_confidence$region
View(trump_confidence$region)
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
trump_confidence$region
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "hopefully works",
num_colors = 9)
trump_confidence <- knn_pred(trump_nums, trump_wins, trump, k=20)
trump_confidence$value = trump_confidence$confidence
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9)
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
View(trump_confidene)
View(trump_confidene)
library(ggplot2)
library(maps)
source("knn.R")
map_data <- function(data, color1, color2, state="ohio") {
# data is a data frame that has the columns: percentages, candidate, and the region.
states = map_data("county", regions=state)
data <- data %>% mutate(percentages = (candidate == "Sanders") * percentages + (candidate == "Clinton") * (-percentages))
#install.packages("maps")
#install.packages("ggplot2")
library(ggplot2)
library(maps)
source("knn.R")
# data is a data frame that has the columns: percentages, candidate, and the region.
map_data <- function(data, color1, color2, state="ohio") {
states = map_data("county", regions=state)
data <- data %>% mutate(percentages = (candidate == "Sanders") * percentages + (candidate == "Clinton") * (-percentages))
names(states) <- tolower(names(data))
combined <- merge(states, data, sort=FALSE, by="region")
data <- data %>% mutate()
ggplot() + geom_polygon(data=combined, aes(x=long, y=lat, group=group, color=percentages))
+ scale_colour_gradient2(low = muted(color1), mid="white", high = muted(color2), guide="colorbar")
+ theme_bw()  + labs(fill = "Candidate", title = "Winning Candidate by State", x="", y="")
}
library(choroplethr)
library(mapproj)
trump_confidence <- knn_pred(trump_nums, trump_wins, trump, k=20)
trump_confidence$value = trump_confidence$confidence
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
}}}}
#install.packages("maps")
#install.packages("ggplot2")
library(ggplot2)
library(maps)
source("knn.R")
# data is a data frame that has the columns: percentages, candidate, and the region.
map_data <- function(data, color1, color2, state="ohio") {
states = map_data("county", regions=state)
data <- data %>% mutate(percentages = (candidate == "Sanders") * percentages + (candidate == "Clinton") * (-percentages))
names(states) <- tolower(names(data))
combined <- merge(states, data, sort=FALSE, by="region")
data <- data %>% mutate()
ggplot() + geom_polygon(data=combined, aes(x=long, y=lat, group=group, color=percentages))
+ scale_colour_gradient2(low = muted(color1), mid="white", high = muted(color2), guide="colorbar")
+ theme_bw()  + labs(fill = "Candidate", title = "Winning Candidate by State", x="", y="")
}
library(choroplethr)
library(mapproj)
trump_confidence <- knn_pred(trump_nums, trump_wins, trump, k=20)
trump_confidence$value = trump_confidence$confidence
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
trump_idaho_labels <- as.numeric(trump$votes - cruz$votes > 0)
trump_idaho_labels
trump_idaho_labels <- as.numeric(trump$votes - cruz$votes > 0)
trump_idaho_labels$value <- trump_idaho_labels
trump_idaho_labels
true_values <- data.frame()
true_values <- data.frame()
true_values$value <- trump_idaho_labels
true_values <- data.frame(value = trump_idaho_labels, region = trump_confidence$region)
trump_confidence$region
trump_idaho_labels <- as.numeric(trump$votes - cruz$votes > 0)[which(trump$state == "Idaho")]
trump_idaho_labels <- as.numeric(trump$votes - cruz$votes > 0)[which(trump$state == "Idaho")]
true_values <- data.frame(value = trump_idaho_labels, region = trump_confidence$region)
true_values$value <- trump_idaho_labels
true_values$region <- trump_confidence$region
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
true_values
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9)
trump_idaho_labels
View(true_values)
trump_confidence
trump$fips == 16049
which(trump$fips == 16049)
which(trump$fips == 16071)
trump_idaho_labels <- as.numeric(trump$votes - cruz$votes > 0)[which(trump$state == "Idaho")]
true_values <- data.frame(value = trump_idaho_labels, region = trump_confidence$region)
true_values$value <- trump_idaho_labels
true_values$region <- trump_confidence$region
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Actual Election Results",
num_colors = 2)
true_values
trump_idaho_labels <- c(as.numeric(trump$votes - cruz$votes > 0)[which(trump$state == "Idaho")], 1)
trump_idaho_labels
trump_confidence$value = trump_confidence$confidence
trump_confidence$region <- trump[which(trump$state == "Idaho"),]$fips
county_choropleth(trump_confidence,
state_zoom = "idaho",
title      = "Trump Win Probability",
num_colors = 9, color = "red")
trump_idaho_labels <- c(as.numeric(trump$votes - cruz$votes > 0)[which(trump$state == "Idaho")], 1)
true_values <- data.frame(value = trump_idaho_labels, region = c(trump_confidence$region, 16049))
true_values$value <- trump_idaho_labels
true_values$region <- trump_confidence$region
lenght(trump_idaho_labels)
lengtht(trump_idaho_labels)
length(trump_idaho_labels)
length(trump_confidence$region)
a <- c(trump_confidence$region, 16049)
length(a)
true_values
true_values$value <- trump_idaho_labels
true_values$region <- trump_confidence$region
true_values <- data.frame(value = trump_idaho_labels, region = c(trump_confidence$region, 16049))
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Actual Election Results",
num_colors = 2)
help("county_choropleth")
county_choropleth(true_values,
state_zoom = "idaho",
}}}
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Actual Election Results",
legendn = c("Trump Win", "Cruz Win"),
num_colors = 2)
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Actual Election Results",
legend = c("Trump Win", "Cruz Win"),
num_colors = 2)
help("county_choropleth")
county_choropleth(true_values,
state_zoom = "idaho",
title      = "Actual Election Results",
legend = c("Trump Win (1), Cruz Win (0)"),
num_colors = 2)
setwd("~/dropbox/stat133/proj/133pres")
setwd("~/dropbox/stat133/proj/133pres")
![Idaho Results](133-image4.png)
